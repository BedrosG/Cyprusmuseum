from flask import Flask, request, jsonify
from flask_cors import CORS
import tensorflow as tf
from tensorflow.keras.applications.mobilenet_v2 import decode_predictions, preprocess_input
from tensorflow.keras.preprocessing import image
import numpy as np
import base64
import io
from PIL import Image

# Create Flask app
app = Flask(__name__)
CORS(app)

# Load MobileNetV2 model with pre-trained ImageNet weights
model = tf.keras.applications.MobileNetV2(weights='imagenet')

# Root route for browser testing
@app.route('/')
def index():
    return "‚úÖ Mobile Object Detection Server is running."

# Prediction route for image classification
@app.route('/predict', methods=['POST'])
def predict():
    print("üì© Received POST request")
    
    try:
        data = request.get_json()
        if 'image' not in data:
            print("‚ùå No 'image' key in request")
            return jsonify({'error': 'No image provided'}), 400

        # Decode the image
        image_data = data['image'].split(',')[1]
        image_bytes = base64.b64decode(image_data)
        img = Image.open(io.BytesIO(image_bytes)).convert('RGB')
        img = img.resize((224, 224))
        x = image.img_to_array(img)
        x = np.expand_dims(x, axis=0)
        x = preprocess_input(x)

        # Make prediction
        preds = model.predict(x)
        decoded = decode_predictions(preds, top=1)[0][0]
        label = decoded[1]
        confidence = float(decoded[2])

        print(f"‚úÖ Prediction: {label} ({confidence*100:.2f}%)")
        return jsonify({'label': label, 'confidence': confidence})

    except Exception as e:
        print(f"‚ùå Prediction failed: {e}")
        return jsonify({'error': 'Prediction failed'}), 500

# Run the server
if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
